
int0_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ec  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000180  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027d  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a2  00000000  00000000  00000485  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000c0  00000000  00000000  00000627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001db  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	68 00       	.word	0x0068	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_clear_bss>:
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a1 36       	cpi	r26, 0x61	; 97
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_global_ctors>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	c6 e5       	ldi	r28, 0x56	; 86
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	04 c0       	rjmp	.+8      	; 0x82 <__do_global_ctors+0x10>
  7a:	22 97       	sbiw	r28, 0x02	; 2
  7c:	fe 01       	movw	r30, r28
  7e:	0e 94 70 00 	call	0xe0	; 0xe0 <__tablejump__>
  82:	c4 35       	cpi	r28, 0x54	; 84
  84:	d1 07       	cpc	r29, r17
  86:	c9 f7       	brne	.-14     	; 0x7a <__do_global_ctors+0x8>
  88:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <_ZN6ButtonC1Ev>:

Button myButton; //Opret objektet globalt, så ISR kan kalde metoder i objektet.

Button::Button()
{
		countMe = 0;
  94:	fc 01       	movw	r30, r24
  96:	10 82       	st	Z, r1
		DDRD = 0x00;
  98:	11 ba       	out	0x11, r1	; 17
		DDRC = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	84 bb       	out	0x14, r24	; 20
				
		GICR = 0b11000000 | GICR;   //enable interrupt
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 6c       	ori	r24, 0xC0	; 192
  a2:	8b bf       	out	0x3b, r24	; 59
		MCUCR = 0b00001110 | MCUCR; //interrupt settings
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	8e 60       	ori	r24, 0x0E	; 14
  a8:	85 bf       	out	0x35, r24	; 53
		sei();						//enable global interrupt
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <__vector_1>:
void Button::callMe()
{
	countMe++;
}

ISR(INT0_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
}


void Button::callMe()
{
	countMe++;
  ba:	80 91 60 00 	lds	r24, 0x0060
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 60 00 	sts	0x0060, r24
}

ISR(INT0_vect){
	myButton.callMe();
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <_GLOBAL__sub_I_myButton>:
 *  Author: entvex
 */ 

#include "Button.h"

Button myButton; //Opret objektet globalt, så ISR kan kalde metoder i objektet.
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4a 00 	call	0x94	; 0x94 <_ZN6ButtonC1Ev>
  d8:	08 95       	ret

000000da <main>:
#include <avr/io.h>
#include "Button.h"


int main(void)
{
  da:	ff cf       	rjmp	.-2      	; 0xda <main>

000000dc <__tablejump2__>:
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31

000000e0 <__tablejump__>:
  e0:	05 90       	lpm	r0, Z+
  e2:	f4 91       	lpm	r31, Z
  e4:	e0 2d       	mov	r30, r0
  e6:	09 94       	ijmp

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
